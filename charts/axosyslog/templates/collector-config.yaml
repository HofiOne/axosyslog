apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "axosyslog.labels" . | nindent 4 }}
  name: {{ include "axosyslog.fullname" . }}-collector
data:
{{- if .Values.collector.config.raw }}
  syslog-ng.conf: {{ tpl (toYaml .Values.collector.config.raw) . | indent 4 }}
{{- else }}
  syslog-ng.conf: |
    @version: {{ regexFind "^[0-9]+\\.[0-9]+" .Chart.AppVersion | default "current" }}
    @include "scl.conf"

    options {
      stats(
        level({{ .Values.collector.config.stats.level }})
      );
    };

    log {
{{- if .Values.collector.config.sources.kubernetes.enabled }}
      source { kubernetes(
  {{- if .Values.collector.config.sources.kubernetes.prefix }}
        prefix({{ .Values.collector.config.sources.kubernetes.prefix | quote }})
  {{- end }}
  {{- if .Values.collector.config.sources.kubernetes.keyDelimiter }}
        key-delimiter({{ .Values.collector.config.sources.kubernetes.keyDelimiter | quote }})
  {{- end }}
      ); };
{{- end }}
{{- range .Values.collector.config.sources.opentelemetry }}
      source {
        opentelemetry(
  {{- if .port }}
            port({{ .port }})
  {{- end }}
        );
      };
{{- end }}
{{- if .Values.collector.config.parsers.opentelemetry.enabled }}
      parser {
        opentelemetry();
      };
{{- end }}
{{- with .Values.collector.config.rewrites.set }}
      rewrite {
{{- range $k, $v := . }}
        set({{ $v | quote }} value({{ $k | quote }}));
{{- end }}
      };
{{- end }}
{{- range .Values.collector.config.destinations.file }}
      destination {
        file(
          {{ .path | quote }}
  {{- if .template }}
          template({{ .template | quote }})
  {{- end }}
  {{- if .extraOptionsRaw }}
          {{ .extraOptionsRaw }}
  {{- end }}
        );
      };
{{- end }}
{{- range .Values.collector.config.destinations.network }}
      destination {
        network(
          {{ .address | quote }}
          port({{ .port }})
          transport({{ .transport }})
  {{- if .template }}
          template({{ .template | quote }})
  {{- end }}
  {{- if .extraOptionsRaw }}
          {{ .extraOptionsRaw }}
  {{- end }}
        );
      };
{{- end }}
{{- range .Values.collector.config.destinations.opensearch }}
      destination {
        elasticsearch-http(
          url("https://{{ .address }}:9200/_bulk")
          index({{ .index | quote }})
          type("")
  {{- if .template }}
          template({{ .template | quote }})
  {{- end }}
  {{- if .user }}
          user({{ .user | quote }})
  {{- end }}
  {{- if .password }}
          password({{ .password | quote }})
  {{- end }}
  {{- if .tls }}
          tls(
    {{- if .tls.CAFile }}
            ca-file({{ .tls.CAFile }})
    {{- end }}
    {{- if .tls.CADir }}
            ca-dir({{ .tls.CADir }})
    {{- end }}
    {{- if .tls.Cert }}
            cert-file({{ .tls.Cert }})
    {{- end }}
    {{- if .tls.Key }}
            key-file({{ .tls.Key }})
    {{- end }}
    {{- if .tls.peerVerify }}
            peer-verify(yes)
    {{- else }}
            peer-verify(no)
    {{- end }}
          )
  {{- end }}
  {{- if .extraOptionsRaw }}
          {{ .extraOptionsRaw }}
  {{- end }}
        );
      };
{{- end }}
{{- range .Values.collector.config.destinations.opentelemetry }}
      destination {
        opentelemetry(
          url({{ tpl .url $ | quote }})
  {{- if .extraOptionsRaw }}
          {{ .extraOptionsRaw }}
  {{- end }}
        );
      };
{{- end }}
{{- range .Values.collector.config.destinations.syslogNgOtlp }}
      destination {
        syslog-ng-otlp (
          url({{ tpl .url $ | quote }})
  {{- if .extraOptionsRaw }}
          {{ .extraOptionsRaw }}
  {{- end }}
        );
      };
{{- end }}
      flags(flow-control);
    };
{{- end }}
